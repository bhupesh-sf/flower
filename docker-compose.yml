version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: flower
      POSTGRES_USER: ${POSTGRES_USER:-flower}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-flower} -d flower"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - flower_network

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3001}:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-flower}:${POSTGRES_PASSWORD}@postgres:5432/flower?schema=public
      PORT: 3001
      HOST: 0.0.0.0
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - flower_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_DOMAIN}`) || PathPrefix(`/api`)"
      - "traefik.http.services.api.loadbalancer.server.port=3001"

  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    depends_on:
      - api
    networks:
      - flower_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.services.web.loadbalancer.server.port=3000"

volumes:
  postgres_data:

networks:
  flower_network:
    driver: bridge